{"version":3,"sources":["redux/store.ts","components/ForecastTable/index.tsx","components/ForecastGraph/index.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["defaultLocationForecast","defaultGraphData","getWeatherData","location","opt","a","options","locdet","latlon","lt","period","detail","u","format","config","params","lc","pdf","axios","get","updateGraphData","forecasts","graphData","forEach","push","name","moment","utc_time","temp","temperature","speed","wind_speed","feelsLike","feels_like_c","humidity","relative_humidity","console","log","dispatch","type","payload","updateWeatherData","locationId","getState","locationData","forecast","forceFetch","response","data","countries","locations","error","rootReducer","combineReducers","state","action","graphForecast","createStore","composeWithDevTools","applyMiddleware","thunk","dayOfYear","ForecastTable","props","useState","inDegrees","setInDegrees","inKmh","setInKmh","useSelector","store","isNewDay","date","currentDay","updateSpeedValue","value","km","toFixed","className","onClick","part_day_forecasts","map","forecastDetail","indexId","colSpan","local_time","tz","time_zone","precis","degrees","wind_direction","ForecastGraph","graphRef","useRef","graphWidth","setGraphWidth","showTemp","showHumidity","useEffect","current","offsetWidth","id","ref","LineChart","width","height","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Line","stroke","activeDot","r","locationCodes","App","setLocationId","useDispatch","updateLocationAndGraph","interval","setInterval","selectRef","Object","keys","key","parseInt","undefined","clearWeatherData","clearInterval","onChange","e","target","defaultValue","loc","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+XAOMA,EAA6C,GAE7CC,EAA4C,GA6B5CC,EAAmB,uCAAG,WAAOC,EAAkBC,GAAzB,iBAAAC,EAAA,6DAClBC,EADkB,2BACH,CACbC,OAAQ,EACRC,OAAQ,EACRC,GAAI,QACJC,OAAQ,GACRC,OAAQ,EACRC,EAAG,EACHC,OAAQ,SACNT,GAEJU,EAAS,CACXC,OAAQ,CACJN,GAAIH,EAAQG,GACZO,GAAIb,EACJI,OAAQD,EAAQC,OAChBC,OAAQF,EAAQE,OAChBS,IAAI,cAAD,OAAgBX,EAAQI,OAAxB,mBAAyCJ,EAAQK,OAAjD,KACHC,EAAGN,EAAQM,EACXC,OAAQP,EAAQO,SAnBA,kBAsBjBK,IAAMC,IAAI,gCAAiCL,IAtB1B,2CAAH,wDAyBZM,EAAkB,SAACC,GAC5B,IAAIC,EAAqC,GAWzC,OAVAD,EAAUE,SAAQ,SAACZ,GACfW,EAAUE,KAAK,CACXC,KAAMC,IAAOf,EAAOgB,UAAUd,OAAO,kBACrCe,KAAMjB,EAAOkB,YACbC,MAAOnB,EAAOoB,WACdC,UAAWrB,EAAOsB,aAClBC,SAAUvB,EAAOwB,uBAGzBC,QAAQC,IAAI,kCAAmCf,GACxC,SAACgB,GACJA,EAAS,CAAEC,KAAM,kCAAmCC,QAASlB,MAIxDmB,EAAoB,SAACC,EAAoBpC,GAClD,8CAAO,WAAOgC,EAAeK,GAAtB,mBAAAtC,EAAA,oEAEKuC,EAA+BD,IAAWE,SAASH,KAClCE,EAAaE,WAHnC,uBAKKV,QAAQC,IAAI,2DALjB,kBAMYO,GANZ,uBASwB1C,EAAewC,EAAY,CAAEpC,YATrD,cASOyC,EATP,OAUCX,QAAQC,IAAI,+BAAgCU,EAASC,MACrDJ,EAAeG,EAASC,KAAKC,UAAU,GAAGC,UAAU,IAC9C/C,EAAgB,IACbuC,GAAcE,EAEvBzC,EAASuC,GAAYI,YAAa,EAClCR,EAAS,CAAEC,KAAM,yBAA0BpC,aAhB5C,kBAiBQyC,GAjBR,yCAmBCR,QAAQe,MAAM,0BAAd,MACAb,EAAS,CAAEC,KAAM,yBAA0BY,MAAK,OApBjD,kFAAP,yDA6CEC,EAAcC,0BAAgB,CAAER,SAvGrB,WAAmD,IAAlDS,EAAiD,uDAAzCtD,EAAyBuD,EAAgB,uCAE/D,OADAnB,QAAQC,IAAI,kCAAmCkB,GACvCA,EAAOhB,MACX,IAAK,yBACD,OAAO,2BAAKe,GAAUC,EAAOpD,UAEjC,IAAK,+BACD,OAAO,2BAAKmD,GAAUC,EAAOlC,WAEjC,QACI,OAAOiC,IA6F6BE,cAnH1B,WAA4C,IAA3CF,EAA0C,uDAAlCrD,EAAkBsD,EAAgB,uCAE7D,OADAnB,QAAQC,IAAI,uCAAwCkB,GAC5CA,EAAOhB,MACX,IAAK,kCACD,OAAOgB,EAAOf,QAElB,QACI,OAAOc,MA8GJG,wBAAYL,EAAaM,8BACpCC,0BAAgBC,O,0BC3HhBC,EAAY,EAkFDC,MAhFf,SAAuBC,GAAa,IAAD,IACGC,oBAAS,GADZ,mBACxBC,EADwB,KACbC,EADa,OAGLF,oBAAS,GAHJ,mBAGxBG,EAHwB,KAGjBC,EAHiB,KAKzBvB,EAAqBwB,aAAY,SAACC,GACpC,OAAOA,EAAMzB,SAASkB,EAAMrB,eAG1B6B,EAAW,SAACC,GACd,IAAMC,EAAa/C,IAAO8C,GAAMX,YAChC,OAAkB,IAAdA,GAIAY,IAAeZ,KAHfA,EAAYY,GACL,IAqBTC,EAAmB,SAACC,EAAeC,GACrC,OAAOA,EAAKD,GAASA,EAAM,OAAOE,QAAQ,IAG9C,OACI,sBAAKC,UAAW,2BAAhB,UACI,sBAAKA,UAAW,oBAAhB,UACC,uBAAOvC,KAAM,SAAUwC,QAnBN,WACtBb,GAAcD,IAkB0CU,MAAK,uBAAkBV,EAAY,aAAe,aACrG,uBAAO1B,KAAM,SAAUwC,QAhBZ,WAChBX,GAAUD,IAewCQ,MAAK,6BAAwBR,EAAQ,QAAU,aAE7F,wBAAOW,UAAW,WAAlB,UACI,gCACA,+BACI,oBAAIA,UAAW,OAAf,kBACA,oBAAIA,UAAW,SAAf,iCACA,qBAAIA,UAAW,OAAf,0BAAqCb,EAAY,8CAAe,8CAAhE,OACA,qBAAIa,UAAW,QAAf,yBAAqCX,EAAQ,OAAS,QAAtD,OACA,oBAAIW,UAAW,YAAf,iCAPR,OAUKjC,QAVL,IAUKA,GAVL,UAUKA,EAAUmC,0BAVf,aAUK,EAA8B3D,UAAU4D,KAAI,SAACC,EAAgCC,GAC1E,OACI,kCACCZ,EAASW,EAAevD,WACrB,oBAAImD,UAAW,UAAf,SACI,oBAAIM,QAAS,EAAb,SACK1D,IAAOwD,EAAeG,YAAYC,GAAGJ,EAAeK,WAAW1E,OAAO,uBAKnF,+BACI,6BAAKa,IAAOwD,EAAeG,YAAYxE,OAAO,YAC9C,6BAAKqE,EAAeM,SACpB,8BAtCCb,EAsCoBO,EAAerD,YAtCpB4D,EAsCiCxB,EArC9DwB,EAAUd,GAAe,IAALA,EAAiB,IAAIE,QAAQ,MAsCpC,6BAAKH,EAAiBQ,EAAenD,WAAYoC,KACjD,6BAAKe,EAAeQ,mBALfP,KATGA,GA1BR,IAACR,EAAec,Y,6DCe7BE,MAhDf,SAAuB5B,GACnB,IAAM6B,EAAgBC,mBADS,EAGK7B,mBAAS,GAHd,mBAGxB8B,EAHwB,KAGZC,EAHY,KAKzBvC,EAAgBa,aAAY,SAACC,GAC/B,OAAOA,EAAMd,iBANc,EASNQ,oBAAS,GATH,mBASxBpC,EATwB,KASlBoE,EATkB,OAWEhC,oBAAS,GAXX,mBAWxB9B,EAXwB,KAWd+D,EAXc,KAyB/B,OAJAC,qBAAU,WACNH,EAAcH,EAASO,QAAQC,YAAc,MAC9C,IAGC,sBAAKtB,UAAU,MAAf,UACI,sBAAKA,UAAW,oBAAhB,UACI,uBAAOvC,KAAM,SAAUwC,QAfT,WACtBiB,GAAUpE,IAciD+C,MAAK,UAAK/C,EAAO,OAAS,OAArB,WACxD,uBAAOW,KAAM,SAAUwC,QAZZ,WACnBkB,GAAc/D,IAW0CyC,MAAK,UAAKzC,EAAW,OAAS,OAAzB,kBAEzD,qBAAKmE,GAAI,kBAAmBC,IAAKV,EAAjC,SACI,eAACW,EAAA,EAAD,CAAWC,MAAOV,EAAYW,OAAQ,IAAKzD,KAAMQ,EAAjD,UACI,cAACkD,EAAA,EAAD,CAAeC,gBAAgB,QAC/B,cAACC,EAAA,EAAD,CAAOC,QAAQ,SACf,cAACC,EAAA,EAAD,CAAOD,QAAQ,aACf,cAACE,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,IACCpF,GAAQ,cAACqF,EAAA,EAAD,CAAM1E,KAAK,WAAWsE,QAAQ,OAAOK,OAAO,UAAUC,UAAW,CAAEC,EAAG,KAC9ElF,GAAY,cAAC+E,EAAA,EAAD,CAAM1E,KAAK,WAAWsE,QAAQ,WAAWK,OAAO,YAC7D,cAACD,EAAA,EAAD,CAAM1E,KAAK,WAAWsE,QAAQ,YAAYK,OAAO,YACjD,cAACD,EAAA,EAAD,CAAM1E,KAAK,WAAWsE,QAAQ,QAAQK,OAAO,qBCtC3DG,EAAgB,CAClB,CAAC5F,KAAM,WAAYkD,MAAO,OAC1B,CAAClD,KAAM,WAAYkD,MAAO,MAC1B,CAAClD,KAAM,WAAYkD,MAAO,MAC1B,CAAClD,KAAM,SAAUkD,MAAO,IACxB,CAAClD,KAAM,SAAUkD,MAAO,OACxB,CAAClD,KAAM,YAAakD,MAAO,MAC3B,CAAClD,KAAM,QAASkD,MAAO,OACvB,CAAClD,KAAM,SAAUkD,MAAO,MAyDb2C,MApDf,WAAgB,IAAD,EACyBtD,mBAAS,KADlC,mBACJtB,EADI,KACQ6E,EADR,KAGLjF,EAAgBkF,cAEhB3E,EAAqBwB,aAAY,SAACC,GACpC,OAAOA,EAAMzB,SAASH,MAO1BwD,qBAAU,YACsB,uCAAG,4BAAA7F,EAAA,sEACEiC,EAASG,EAAkBC,EAAY,KADzC,cACrBM,EADqB,gBAEEV,EAASlB,EAAgB4B,EAAKgC,mBAAmB3D,YAFnD,yDAAH,qDAK5BoG,KACD,CAAC/E,IAEJwD,qBAAU,WAEN,IAAMwB,EAAWC,aAAY,WACzBvF,QAAQC,IAAR,kFAA+FuF,EAAUzB,QAAQxB,OACjHrC,EH4DoB,SAACI,GAC9B,OAAO,SAACJ,EAAeK,GACnB,IAAIK,EAAOL,IAAWE,SAClBxB,EAAiB,GACrBwG,OAAOC,KAAK9E,GAAMzB,SAAQ,SAACwG,GAEnBC,SAASD,EAAK,MAAQrF,GAEtBrB,EAAU0G,GAAO/E,EAAK+E,GACtB1G,EAAU0G,GAAKjF,YAAa,GAG5BzB,EAAU0G,QAAOE,KAGzB3F,EAAS,CAAEC,KAAM,+BAAgClB,eG3EnC6G,CAAiBF,SAASJ,EAAUzB,QAAQxB,MAAO,QA5B7C,KA8BnB,OAAO,kBAAMwD,cAAcT,MAC5B,IAEH,IAAME,EAAiB/B,mBAEvB,OACI,sBAAKf,UAAU,MAAf,UACI,sBAAKA,UAAW,oBAAhB,UACI,+DACA,wBAAQwB,IAAKsB,EAAWvB,GAAI,YAAa+B,SA5B5B,SAACC,GACtBd,EAAcc,EAAEC,OAAO3D,QA2BsD4D,aAAc7F,EAAnF,SACK2E,EAAcpC,KAAI,SAACuD,EAAKrD,GACrB,OAAQ,wBAAsBR,MAAO6D,EAAI7D,MAAjC,SAAyC6D,EAAI/G,MAAhC0D,WAIjC,8DAC0BtC,QAD1B,IAC0BA,OAD1B,EAC0BA,EAAUpB,QAEpC,cAAC,EAAD,IACA,cAAC,EAAD,CAAeiB,WAAYA,QCxDxB+F,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCEdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAU9E,MAAOA,EAAjB,SACI,cAAC,EAAD,QAGR+E,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c1009ce7.chunk.js","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { ForecastDetail, GraphForecastObj, LocationForecasts, WeatherOptions} from \"../interfaces\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\n\r\nconst defaultLocationForecast: LocationForecasts = {};\r\n\r\nconst defaultGraphData: Array<GraphForecastObj> = [];\r\n\r\nconst graphForecast = (state = defaultGraphData, action: any) => {\r\n    console.log(\"store dispatch :: graphForecast ::: \", action);\r\n    switch (action.type) {\r\n        case 'UPDATE_LOCATION_GRAPH_FORECASTS': {\r\n            return action.payload;\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};\r\n\r\nconst forecast = (state = defaultLocationForecast, action: any) => {\r\n    console.log(\"store dispatch :: forecast ::: \", action);\r\n    switch (action.type) {\r\n        case 'ADD_LOCATION_FORECASTS': {\r\n            return { ...state, ...action.location };\r\n        }\r\n        case 'CLEAR_ALL_LOCATION_FORECASTS': {\r\n            return { ...state, ...action.forecasts };\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};\r\n\r\nconst getWeatherData: any = async (location: number, opt: WeatherOptions) => {\r\n    const options = { ...{\r\n            locdet: 1,\r\n            latlon: 1,\r\n            lt: 'aploc',\r\n            period: 48,\r\n            detail: 2,\r\n            u: 1,\r\n            format: \"json\"\r\n        }, ...opt\r\n    };\r\n    const config = {\r\n        params: {\r\n            lt: options.lt,\r\n            lc: location,\r\n            locdet: options.locdet,\r\n            latlon: options.latlon,\r\n            pdf: `twc(period=${options.period},detail=${options.detail})`,\r\n            u: options.u,\r\n            format: options.format,\r\n        }\r\n    };\r\n    return axios.get(\"https://ws.weatherzone.com.au\", config);\r\n};\r\n\r\nexport const updateGraphData = (forecasts: any) => {\r\n    let graphData: Array<GraphForecastObj> = [];\r\n    forecasts.forEach((detail: ForecastDetail) => {\r\n        graphData.push({\r\n            name: moment(detail.utc_time).format(\"ddd Do, h:mm a\"),\r\n            temp: detail.temperature,\r\n            speed: detail.wind_speed,\r\n            feelsLike: detail.feels_like_c,\r\n            humidity: detail.relative_humidity\r\n        });\r\n    });\r\n    console.log(\"getWeatherData graphForecasts: \", graphData);\r\n    return (dispatch: any) => {\r\n        dispatch({ type: \"UPDATE_LOCATION_GRAPH_FORECASTS\", payload: graphData });\r\n    }\r\n};\r\n\r\nexport const updateWeatherData = (locationId: number, options: WeatherOptions) => {\r\n    return async (dispatch: any, getState: any) => {\r\n        try {\r\n            let locationData: ForecastDetail = getState().forecast[locationId];\r\n            if (locationData && !locationData.forceFetch) {\r\n                // selected Location data is present in state and there is no forceFetch boolean applied, so return the same from state (Cache)\r\n                console.log(\"updateWeatherData locationData exists return the same: \");\r\n                return locationData;\r\n            }\r\n            // Either no locationData is present, or there forceFetch=true, Therefore fetch data again\r\n            const response = await getWeatherData(locationId, { options });\r\n            console.log(\"updateWeatherData RESPONSE: \", response.data);\r\n            locationData = response.data.countries[0].locations[0];\r\n            const location: any = {};\r\n            location[locationId] = locationData;\r\n            // Set forceFetch = false, so it need to be fetched again until explicitly set\r\n            location[locationId].forceFetch = false;\r\n            dispatch({ type: \"ADD_LOCATION_FORECASTS\", location });\r\n            return locationData;\r\n        } catch (error: any) {\r\n            console.error(\"updateWeatherData ERR: \", error);\r\n            dispatch({ type: \"ADD_PART_DAY_FORECASTS\", error });\r\n            return error;\r\n        }\r\n    }\r\n};\r\n\r\nexport const clearWeatherData = (locationId?: number) => {\r\n   return (dispatch: any, getState: any) => {\r\n       let data = getState().forecast;\r\n       let forecasts: any = {};\r\n       Object.keys(data).forEach((key: any) => {\r\n           debugger;\r\n           if (parseInt(key, 10) === locationId) {\r\n               // forceFetch = true; Because the data is in use currently, do not clear it, but make sure to fetch it when its reloaded.\r\n               forecasts[key] = data[key];\r\n               forecasts[key].forceFetch = true;\r\n           } else {\r\n               // Remove all other items in forecast state as they need to fetched from server again.\r\n               forecasts[key] = undefined;\r\n           }\r\n       });\r\n       dispatch({ type: \"CLEAR_ALL_LOCATION_FORECASTS\", forecasts });\r\n   }\r\n};\r\n\r\nconst rootReducer = combineReducers({ forecast, graphForecast });\r\n\r\nexport default createStore(rootReducer, composeWithDevTools(\r\n    applyMiddleware(thunk),\r\n));\r\n","import './styles.scss';\r\nimport React, {useEffect, useState, useRef} from \"react\";\r\nimport moment from 'moment-timezone';\r\nimport {useSelector} from \"react-redux\";\r\nimport {Forecast, ForecastDetail} from \"../../interfaces\";\r\n\r\nlet dayOfYear = 0;\r\n\r\nfunction ForecastTable(props: any) {\r\n    const [inDegrees, setInDegrees] = useState(true);\r\n\r\n    const [inKmh, setInKmh] = useState(true);\r\n\r\n    const forecast: Forecast = useSelector((store: any) => {\r\n        return store.forecast[props.locationId];\r\n    });\r\n\r\n    const isNewDay = (date: string) => {\r\n        const currentDay = moment(date).dayOfYear();\r\n        if (dayOfYear === 0) {\r\n            dayOfYear = currentDay;\r\n            return true;\r\n        }\r\n        if (currentDay !== dayOfYear) {\r\n            dayOfYear = currentDay;\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const toggleTemperature = () => {\r\n        setInDegrees(!inDegrees);\r\n    };\r\n\r\n    const toggleSpeed = () => {\r\n        setInKmh(!inKmh);\r\n    };\r\n\r\n    const updateTempValue = (value: number, degrees: boolean) => {\r\n        return degrees ? value : ((value * (9/5)) + 32).toFixed(1);\r\n    };\r\n\r\n    const updateSpeedValue = (value: number, km: boolean) => {\r\n        return km ? value : (value/1.852).toFixed(1);\r\n    };\r\n\r\n    return (\r\n        <div className={\"forecast-table-container\"}>\r\n            <div className={\"buttons-container\"}>\r\n             <input type={\"button\"} onClick={toggleTemperature} value={`Show temp in ${inDegrees ? \"Fahrenheit\" : \"Celsius\"}`}/>\r\n             <input type={\"button\"} onClick={toggleSpeed} value={`Show wind speed in ${inKmh ? \"Knots\" : \"Km/h\"}`}/>\r\n            </div>\r\n            <table className={\"forecast\"}>\r\n                <thead>\r\n                <tr>\r\n                    <th className={\"date\"}>Date</th>\r\n                    <th className={\"chance\"}>Probability of Rain</th>\r\n                    <th className={\"temp\"}>Temperature ({inDegrees ? <>&#8451;</> : <>&#8457;</>})</th>\r\n                    <th className={\"speed\"}>Wind Speed ({inKmh ? \"Km/h\" : \"knots\"})</th>\r\n                    <th className={\"direction\"}>Wind Direction</th>\r\n                </tr>\r\n                </thead>\r\n                {forecast?.part_day_forecasts?.forecasts.map((forecastDetail: ForecastDetail, indexId: number) => {\r\n                    return (\r\n                        <tbody key={indexId}>\r\n                        {isNewDay(forecastDetail.utc_time) && (\r\n                            <tr className={\"new-day\"}>\r\n                                <td colSpan={5}>\r\n                                    {moment(forecastDetail.local_time).tz(forecastDetail.time_zone).format(\"DD/MM/YY dddd z\")}\r\n                                </td>\r\n                            </tr>\r\n                        )}\r\n\r\n                        <tr key={indexId}>\r\n                            <td>{moment(forecastDetail.local_time).format(\"h:mm a\")}</td>\r\n                            <td>{forecastDetail.precis}</td>\r\n                            <td>{updateTempValue(forecastDetail.temperature, inDegrees)}</td>\r\n                            <td>{updateSpeedValue(forecastDetail.wind_speed, inKmh)}</td>\r\n                            <td>{forecastDetail.wind_direction}</td>\r\n                        </tr>\r\n                        </tbody>\r\n                    );\r\n                })}\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ForecastTable;\r\n","import React, {useEffect, useState, useRef} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {  LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from 'recharts';\r\n\r\n\r\nfunction ForecastGraph(props: any) {\r\n    const graphRef: any = useRef();\r\n\r\n    const [graphWidth, setGraphWidth] = useState(0);\r\n\r\n    const graphForecast = useSelector((store: any) => {\r\n        return store.graphForecast;\r\n    });\r\n\r\n    const [temp, showTemp] = useState(true);\r\n\r\n    const [humidity, showHumidity] = useState(true);\r\n\r\n    const toggleTemperature = () => {\r\n        showTemp(!temp);\r\n    };\r\n\r\n    const toggleHumidity = () => {\r\n        showHumidity(!humidity);\r\n    };\r\n\r\n    useEffect(() => {\r\n        setGraphWidth(graphRef.current.offsetWidth - 10);\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div className={\"buttons-container\"}>\r\n                <input type={\"button\"} onClick={toggleTemperature} value={`${temp ? \"Hide\" : \"Show\"} Temp`}/>\r\n                <input type={\"button\"} onClick={toggleHumidity} value={`${humidity ? \"Hide\" : \"Show\"} Humidity`}/>\r\n            </div>\r\n            <div id={\"graph-container\"} ref={graphRef}>\r\n                <LineChart width={graphWidth} height={300} data={graphForecast}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"name\" />\r\n                    <YAxis dataKey=\"humidity\" />\r\n                    <Tooltip />\r\n                    <Legend />\r\n                    {temp && <Line type=\"monotone\" dataKey=\"temp\" stroke=\"#CC0000\" activeDot={{ r: 8 }} />}\r\n                    {humidity && <Line type=\"monotone\" dataKey=\"humidity\" stroke=\"#993333\" />}\r\n                    <Line type=\"monotone\" dataKey=\"feelsLike\" stroke=\"#cccc00\" />\r\n                    <Line type=\"monotone\" dataKey=\"speed\" stroke=\"#33ccff\" />\r\n                </LineChart>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ForecastGraph;\r\n","import './App.scss';\nimport React, {useEffect, useState, useRef} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Forecast} from \"./interfaces\";\nimport {clearWeatherData, updateGraphData, updateWeatherData} from \"./redux/store\";\nimport ForecastTable from \"./components/ForecastTable\";\nimport ForecastGraph from \"./components/ForecastGraph\";\n\nconst locationCodes = [\n    {name: \"Adelaide\", value: 12495},\n    {name: \"Brisbane\", value: 9388},\n    {name: \"Canberra\", value: 3928},\n    {name: \"Darwin\", value: 11},\n    {name: \"Hobart\", value: 15464},\n    {name: \"Melbourne\", value: 5594},\n    {name: \"Perth\", value: 13896},\n    {name: \"Sydney\", value: 624},\n];\n\nconst cacheTimer: number = 90000; // will clear all states after 90 seconds\n\nfunction App() {\n    const [locationId, setLocationId] = useState(624);\n\n    const dispatch: any = useDispatch();\n\n    const forecast: Forecast = useSelector((store: any) => {\n        return store.forecast[locationId];\n    });\n\n    const onLocationChange = (e: any) => {\n        setLocationId(e.target.value);\n    };\n\n    useEffect(() => {\n        const updateLocationAndGraph = async () => {\n            const data: Forecast = await dispatch(updateWeatherData(locationId, {}));\n            const graphData: any = await dispatch(updateGraphData(data.part_day_forecasts.forecasts));\n            // do something else here...\n        };\n        updateLocationAndGraph();\n    }, [locationId]);\n\n    useEffect(() => {\n        // will clear existing cache after every 90 seconds.\n        const interval = setInterval(() => {\n            console.log(`*********** CLEARING ALL LOCATION DATA **************** except selected item : `, selectRef.current.value);\n            dispatch(clearWeatherData(parseInt(selectRef.current.value, 10)));\n        }, cacheTimer);\n        return () => clearInterval(interval);\n    }, []);\n\n    const selectRef: any = useRef();\n\n    return (\n        <div className=\"App\">\n            <div className={\"options-container\"}>\n                <label>Please select a Location: </label>\n                <select ref={selectRef} id={\"locations\"} onChange={onLocationChange} defaultValue={locationId}>\n                    {locationCodes.map((loc, indexId) => {\n                        return (<option key={indexId} value={loc.value}>{loc.name}</option>)\n                    })}\n                </select>\n            </div>\n            <h1>\n                Weather forecast for {forecast?.name}\n            </h1>\n            <ForecastGraph/>\n            <ForecastTable locationId={locationId}/>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './index.scss';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from \"./redux/store\";\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}