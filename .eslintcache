[{"C:\\workspace\\weatherzone-react-redux\\src\\reportWebVitals.js":"1","C:\\workspace\\weatherzone-react-redux\\src\\App.tsx":"2","C:\\workspace\\weatherzone-react-redux\\src\\redux\\store.ts":"3","C:\\workspace\\weatherzone-react-redux\\src\\index.tsx":"4","C:\\workspace\\weatherzone-react-redux\\src\\components\\ForecastTable\\index.tsx":"5","C:\\workspace\\weatherzone-react-redux\\src\\components\\ForecastGraph\\index.tsx":"6"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":2371,"mtime":1612001670538,"results":"9","hashOfConfig":"8"},{"size":3990,"mtime":1612001100521,"results":"10","hashOfConfig":"8"},{"size":632,"mtime":1611965748089,"results":"11","hashOfConfig":"8"},{"size":3391,"mtime":1612002825478,"results":"12","hashOfConfig":"8"},{"size":1404,"mtime":1611994535910,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1gky5si",{"filePath":"16","messages":"17","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},"C:\\workspace\\weatherzone-react-redux\\src\\reportWebVitals.js",[],"C:\\workspace\\weatherzone-react-redux\\src\\App.tsx",["28","29","30","31"],"import './App.scss';\nimport React, {useEffect, useState, useRef} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Forecast} from \"./interfaces\";\nimport {clearWeatherData, updateGraphData, updateWeatherData} from \"./redux/store\";\nimport ForecastTable from \"./components/ForecastTable\";\nimport ForecastGraph from \"./components/ForecastGraph\";\n\nconst locationCodes = [\n    {name: \"Adelaide\", value: 12495},\n    {name: \"Brisbane\", value: 9388},\n    {name: \"Canberra\", value: 3928},\n    {name: \"Darwin\", value: 11},\n    {name: \"Hobart\", value: 15464},\n    {name: \"Melbourne\", value: 5594},\n    {name: \"Perth\", value: 13896},\n    {name: \"Sydney\", value: 624},\n];\n\nconst cacheTimer: number = 30000;\n\nfunction App() {\n    const [locationId, setLocationId] = useState(624);\n\n    const dispatch: any = useDispatch();\n\n    const forecast: Forecast = useSelector((store: any) => {\n        return store.forecast[locationId];\n    });\n\n    const onLocationChange = (e: any) => {\n        console.log(\"onLocationChange = \", e.target.value);\n        setLocationId(e.target.value);\n    };\n\n    useEffect(() => {\n        const updateLocationAndGraph = async () => {\n            const data: Forecast = await dispatch(updateWeatherData(locationId, {}));\n            const graphData: any = await dispatch(updateGraphData(data.part_day_forecasts.forecasts));\n            // do something else here...\n        };\n        updateLocationAndGraph();\n    }, [locationId]);\n\n    useEffect(() => {\n        setTimeout(() => {\n            console.log(\"*********** CLEARING ALL LOCATION DATA **************** \");\n            // dispatch(clearWeatherData());\n        }, cacheTimer);\n    }, []);\n\n    return (\n        <div className=\"App\">\n            <div className={\"options-container\"}>\n                <label>Please select a Location: </label>\n                <select id={\"locations\"} onChange={onLocationChange} defaultValue={locationId}>\n                    {locationCodes.map((loc, indexId) => {\n                        return (<option key={indexId} value={loc.value}>{loc.name}</option>)\n                    })}\n                </select>\n            </div>\n            <h1>\n                Weather forecast for {forecast?.name}\n            </h1>\n            <ForecastGraph/>\n            <ForecastTable locationId={locationId}/>\n        </div>\n    );\n}\n\nexport default App;\n","C:\\workspace\\weatherzone-react-redux\\src\\redux\\store.ts",["32"],"C:\\workspace\\weatherzone-react-redux\\src\\index.tsx",[],"C:\\workspace\\weatherzone-react-redux\\src\\components\\ForecastTable\\index.tsx",["33","34"],"C:\\workspace\\weatherzone-react-redux\\src\\components\\ForecastGraph\\index.tsx",["35"],"import React, {useEffect, useState, useRef} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {  LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from 'recharts';\r\n\r\n\r\nfunction ForecastGraph(props: any) {\r\n    const graphRef: any = useRef();\r\n\r\n    const [graphWidth, setGraphWidth] = useState(0);\r\n\r\n    const graphForecast = useSelector((store: any) => {\r\n        return store.graphForecast;\r\n    });\r\n\r\n    useEffect(() => {\r\n        setGraphWidth(graphRef.current.offsetWidth - 10);\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div id={\"graph-container\"} ref={graphRef}>\r\n                <LineChart width={graphWidth} height={300} data={graphForecast}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"name\" />\r\n                    <YAxis dataKey=\"humidity\" />\r\n                    <Tooltip />\r\n                    <Legend />\r\n                    <Line type=\"monotone\" dataKey=\"temp\" stroke=\"#CC0000\" activeDot={{ r: 8 }} />\r\n                    <Line type=\"monotone\" dataKey=\"humidity\" stroke=\"#993333\" />\r\n                    <Line type=\"monotone\" dataKey=\"feelsLike\" stroke=\"#cccc00\" />\r\n                    <Line type=\"monotone\" dataKey=\"speed\" stroke=\"#33ccff\" />\r\n                </LineChart>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ForecastGraph;\r\n",{"ruleId":"36","severity":1,"message":"37","line":2,"column":37,"nodeType":"38","messageId":"39","endLine":2,"endColumn":43},{"ruleId":"36","severity":1,"message":"40","line":5,"column":9,"nodeType":"38","messageId":"39","endLine":5,"endColumn":25},{"ruleId":"36","severity":1,"message":"41","line":39,"column":19,"nodeType":"38","messageId":"39","endLine":39,"endColumn":33},{"ruleId":"42","severity":1,"message":"43","line":43,"column":8,"nodeType":"44","endLine":43,"endColumn":20,"suggestions":"45"},{"ruleId":"36","severity":1,"message":"46","line":4,"column":63,"nodeType":"38","messageId":"39","endLine":4,"endColumn":71},{"ruleId":"36","severity":1,"message":"47","line":2,"column":16,"nodeType":"38","messageId":"39","endLine":2,"endColumn":25},{"ruleId":"36","severity":1,"message":"37","line":2,"column":37,"nodeType":"38","messageId":"39","endLine":2,"endColumn":43},{"ruleId":"36","severity":1,"message":"48","line":2,"column":9,"nodeType":"38","messageId":"39","endLine":2,"endColumn":20},"@typescript-eslint/no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'clearWeatherData' is defined but never used.","'graphData' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["49"],"'MetaData' is defined but never used.","'useEffect' is defined but never used.","'useDispatch' is defined but never used.",{"desc":"50","fix":"51"},"Update the dependencies array to be: [dispatch, locationId]",{"range":"52","text":"53"},[1455,1467],"[dispatch, locationId]"]